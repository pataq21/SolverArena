{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SolverArena SolverArena is a Python library to run and compare optimization models using multiple solvers in a unified and reproducible way. Features Run optimization models (MPS format) with different solvers using a single interface. Compare solver performance (status, objective value, runtime, memory, etc.). Easily extendable to support new solvers. Export results to CSV for further analysis. Simple API for integration in research and benchmarking workflows. Quick Example from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\", \"presolve\": \"on\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results)","title":"Home"},{"location":"#solverarena","text":"SolverArena is a Python library to run and compare optimization models using multiple solvers in a unified and reproducible way.","title":"SolverArena"},{"location":"#features","text":"Run optimization models (MPS format) with different solvers using a single interface. Compare solver performance (status, objective value, runtime, memory, etc.). Easily extendable to support new solvers. Export results to CSV for further analysis. Simple API for integration in research and benchmarking workflows.","title":"Features"},{"location":"#quick-example","text":"from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\", \"presolve\": \"on\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results)","title":"Quick Example"},{"location":"api/","text":"API Reference This page documents the main public API of SolverArena. run_models def run_models(mps_files: List[str], solvers: Dict[str, Dict], output_dir: str = \"results\") -> List[Dict]: Runs a set of solvers on given MPS files and records the results. Parameters: - mps_files ( List[str] ): List of paths to MPS files representing optimization models. - solvers ( Dict[str, Dict] ): Dictionary where keys are execution aliases and values are dictionaries containing at least 'solver_name' and optionally other solver parameters. - output_dir ( str , optional): Directory where the result CSV will be saved. Defaults to \"results\" . Returns: - List[Dict] : List of dictionaries with results for each model-solver pair. Raises: - InputValidationError : If the input parameters fail validation. - IOError : If there's an error writing the results file. - Exception : For other unexpected errors during execution. Example: results = run_models([\"model.mps\"], {\"cbc\": {\"solver_name\": \"cbc\"}}) get_available_solvers def get_available_solvers() -> List[str]: Returns a list of names of all available/supported solvers based on configuration. Returns: - List[str] : List of solver names (e.g., [\"highs\", \"cbc\", \"gurobi\", ...] ). Example: from solverarena import get_available_solvers print(get_available_solvers()) Error Handling InputValidationError Raised when input parameters to run_models are invalid. See Also Getting Started Examples Changelog","title":"API Reference"},{"location":"api/#api-reference","text":"This page documents the main public API of SolverArena.","title":"API Reference"},{"location":"api/#run_models","text":"def run_models(mps_files: List[str], solvers: Dict[str, Dict], output_dir: str = \"results\") -> List[Dict]: Runs a set of solvers on given MPS files and records the results. Parameters: - mps_files ( List[str] ): List of paths to MPS files representing optimization models. - solvers ( Dict[str, Dict] ): Dictionary where keys are execution aliases and values are dictionaries containing at least 'solver_name' and optionally other solver parameters. - output_dir ( str , optional): Directory where the result CSV will be saved. Defaults to \"results\" . Returns: - List[Dict] : List of dictionaries with results for each model-solver pair. Raises: - InputValidationError : If the input parameters fail validation. - IOError : If there's an error writing the results file. - Exception : For other unexpected errors during execution. Example: results = run_models([\"model.mps\"], {\"cbc\": {\"solver_name\": \"cbc\"}})","title":"run_models"},{"location":"api/#get_available_solvers","text":"def get_available_solvers() -> List[str]: Returns a list of names of all available/supported solvers based on configuration. Returns: - List[str] : List of solver names (e.g., [\"highs\", \"cbc\", \"gurobi\", ...] ). Example: from solverarena import get_available_solvers print(get_available_solvers())","title":"get_available_solvers"},{"location":"api/#error-handling","text":"","title":"Error Handling"},{"location":"api/#inputvalidationerror","text":"Raised when input parameters to run_models are invalid.","title":"InputValidationError"},{"location":"api/#see-also","text":"Getting Started Examples Changelog","title":"See Also"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. [0.2.7] - 2025-06-08 Added Exposed get_available_solvers in the public API. Enhanced test coverage for edge cases and API exposure. Changed Refactored core logic for clarity and maintainability. Updated pyproject.toml and dependencies. Older versions: see repository history for details.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog/#027-2025-06-08","text":"","title":"[0.2.7] - 2025-06-08"},{"location":"changelog/#added","text":"Exposed get_available_solvers in the public API. Enhanced test coverage for edge cases and API exposure.","title":"Added"},{"location":"changelog/#changed","text":"Refactored core logic for clarity and maintainability. Updated pyproject.toml and dependencies. Older versions: see repository history for details.","title":"Changed"},{"location":"contributing/","text":"Contributing to SolverArena Thank you for your interest in contributing to SolverArena! Your help is welcome to improve the library, documentation, and examples. How to Contribute Fork the repository on GitHub and clone your fork locally. Create a new branch for your feature or bugfix: git checkout -b my-feature Install development dependencies : pip install -e .[dev] Write your code and tests . Please include or update tests for any new features or bugfixes. Run the test suite to ensure everything works: pytest Format and lint your code using ruff : ruff check . --fix Commit and push your changes to your fork. Open a Pull Request on GitHub with a clear description of your changes. Guidelines Follow PEP8 style guidelines. Write clear docstrings and comments. Add or update documentation as needed (see the docs/ folder). If you add a new solver, update the documentation and tests. Be respectful and constructive in code reviews and discussions. Reporting Issues If you find a bug or have a feature request, please open an issue on GitHub with as much detail as possible. Community GitHub Repository Documentation Thank you for helping make SolverArena better!","title":"Contributing"},{"location":"contributing/#contributing-to-solverarena","text":"Thank you for your interest in contributing to SolverArena! Your help is welcome to improve the library, documentation, and examples.","title":"Contributing to SolverArena"},{"location":"contributing/#how-to-contribute","text":"Fork the repository on GitHub and clone your fork locally. Create a new branch for your feature or bugfix: git checkout -b my-feature Install development dependencies : pip install -e .[dev] Write your code and tests . Please include or update tests for any new features or bugfixes. Run the test suite to ensure everything works: pytest Format and lint your code using ruff : ruff check . --fix Commit and push your changes to your fork. Open a Pull Request on GitHub with a clear description of your changes.","title":"How to Contribute"},{"location":"contributing/#guidelines","text":"Follow PEP8 style guidelines. Write clear docstrings and comments. Add or update documentation as needed (see the docs/ folder). If you add a new solver, update the documentation and tests. Be respectful and constructive in code reviews and discussions.","title":"Guidelines"},{"location":"contributing/#reporting-issues","text":"If you find a bug or have a feature request, please open an issue on GitHub with as much detail as possible.","title":"Reporting Issues"},{"location":"contributing/#community","text":"GitHub Repository Documentation Thank you for helping make SolverArena better!","title":"Community"},{"location":"examples/","text":"Examples Here are some practical examples to help you get started with SolverArena. 1. Run Multiple Solvers on a Single Model from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results) 2. Run a Solver with Custom Parameters from solverarena import run_models mps_files = [\"examples/mps_files/model.mps\"] solvers = { \"highs_ipm\": {\"solver_name\": \"highs\", \"solver\": \"ipm\", \"time_limit\": 600}, \"highs_simplex\": {\"solver_name\": \"highs\", \"solver\": \"simplex\", \"presolve\": \"off\"} } results = run_models(mps_files, solvers) for res in results: print(f\"{res['execution_alias']}: status={res['status']}, obj={res['objective_value']}\") 3. List Available Solvers from solverarena import get_available_solvers print(\"Available solvers:\", get_available_solvers()) 4. Export Results to CSV By default, run_models will export results to a timestamped CSV file in the results/ directory. You can specify a custom output directory: from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = {\"highs_default\": {\"solver_name\": \"highs\"}} results = run_models(mps_files, solvers, output_dir=\"my_results\") For more advanced usage, see the API Reference or check the Getting Started guide.","title":"Examples"},{"location":"examples/#examples","text":"Here are some practical examples to help you get started with SolverArena.","title":"Examples"},{"location":"examples/#1-run-multiple-solvers-on-a-single-model","text":"from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results)","title":"1. Run Multiple Solvers on a Single Model"},{"location":"examples/#2-run-a-solver-with-custom-parameters","text":"from solverarena import run_models mps_files = [\"examples/mps_files/model.mps\"] solvers = { \"highs_ipm\": {\"solver_name\": \"highs\", \"solver\": \"ipm\", \"time_limit\": 600}, \"highs_simplex\": {\"solver_name\": \"highs\", \"solver\": \"simplex\", \"presolve\": \"off\"} } results = run_models(mps_files, solvers) for res in results: print(f\"{res['execution_alias']}: status={res['status']}, obj={res['objective_value']}\")","title":"2. Run a Solver with Custom Parameters"},{"location":"examples/#3-list-available-solvers","text":"from solverarena import get_available_solvers print(\"Available solvers:\", get_available_solvers())","title":"3. List Available Solvers"},{"location":"examples/#4-export-results-to-csv","text":"By default, run_models will export results to a timestamped CSV file in the results/ directory. You can specify a custom output directory: from solverarena import run_models mps_files = [\"examples/mps_files/model_dataset100.mps\"] solvers = {\"highs_default\": {\"solver_name\": \"highs\"}} results = run_models(mps_files, solvers, output_dir=\"my_results\") For more advanced usage, see the API Reference or check the Getting Started guide.","title":"4. Export Results to CSV"},{"location":"getting_started/","text":"Getting Started Welcome to SolverArena ! This guide will help you install the library, set up your environment, and run your first optimization benchmark. Installation SolverArena requires Python 3.12 or higher. Install the core package with pip: pip install solverarena To use specific solvers, install the corresponding extras. For example, to use HiGHS and Gurobi: pip install solverarena[highs] pip install solverarena[gurobi] Or install all supported solvers and development tools: pip install solverarena[all_solvers,dev] Note: Some solvers (like Gurobi or COPT) may require a license and additional setup. Please refer to their documentation. Preparing Your Models SolverArena works with models in MPS format . Place your .mps files in a directory, for example: examples/mps_files/model1.mps . Running Your First Benchmark Here's a minimal example to run two solvers on a model: from solverarena import run_models mps_files = [\"examples/mps_files/model1.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results) This will run both solvers on the model and print the results. Checking Available Solvers You can list all solvers supported by SolverArena: from solverarena import get_available_solvers print(get_available_solvers()) Next Steps Check the Examples for more advanced usage. Visit the Repository for source code and issue tracking.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Welcome to SolverArena ! This guide will help you install the library, set up your environment, and run your first optimization benchmark.","title":"Getting Started"},{"location":"getting_started/#installation","text":"SolverArena requires Python 3.12 or higher. Install the core package with pip: pip install solverarena To use specific solvers, install the corresponding extras. For example, to use HiGHS and Gurobi: pip install solverarena[highs] pip install solverarena[gurobi] Or install all supported solvers and development tools: pip install solverarena[all_solvers,dev] Note: Some solvers (like Gurobi or COPT) may require a license and additional setup. Please refer to their documentation.","title":"Installation"},{"location":"getting_started/#preparing-your-models","text":"SolverArena works with models in MPS format . Place your .mps files in a directory, for example: examples/mps_files/model1.mps .","title":"Preparing Your Models"},{"location":"getting_started/#running-your-first-benchmark","text":"Here's a minimal example to run two solvers on a model: from solverarena import run_models mps_files = [\"examples/mps_files/model1.mps\"] solvers = { \"highs_default\": {\"solver_name\": \"highs\"}, \"cbc_default\": {\"solver_name\": \"cbc\"} } results = run_models(mps_files, solvers) print(results) This will run both solvers on the model and print the results.","title":"Running Your First Benchmark"},{"location":"getting_started/#checking-available-solvers","text":"You can list all solvers supported by SolverArena: from solverarena import get_available_solvers print(get_available_solvers())","title":"Checking Available Solvers"},{"location":"getting_started/#next-steps","text":"Check the Examples for more advanced usage. Visit the Repository for source code and issue tracking.","title":"Next Steps"},{"location":"license/","text":"License SolverArena is licensed under the MIT License. Copyright (c) 2024 Javier Berga Garc\u00eda Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"SolverArena is licensed under the MIT License. Copyright (c) 2024 Javier Berga Garc\u00eda Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}